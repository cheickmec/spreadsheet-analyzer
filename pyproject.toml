[project]
name = "spreadsheet-analyzer"
version = "0.1.0"
description = "Add your description here"
requires-python = ">=3.12"
dependencies = [
    "certifi==2025.7.14",
    "chardet>=5.2.0",
    "defusedxml>=0.7.1",
    "openpyxl>=3.1.5",
]

[project.optional-dependencies]
dev = [
    "pre-commit>=3.8.0",
    "pytest>=8.3.0",
    "pytest-cov>=5.0.0",
    "pytest-timeout>=2.3.1",
    "mypy==1.17.0",
    "ruff==0.12.4",
    "bandit[toml]>=1.8.0",
    "safety>=3.2.0",
    "types-openpyxl>=3.1.0.20240311",
    "types-defusedxml>=0.7.0.20240218",
    "types-jsonschema>=4.17.3",
]
graph = [
    "neo4j>=5.28.1",
    "tqdm>=4.66.0",
]

[tool.ruff]
# Ruff configuration
line-length = 120
target-version = "py312"

[tool.ruff.lint]
# Focus on the most important code quality rules
select = [
    "E",      # pycodestyle errors
    "W",      # pycodestyle warnings
    "F",      # pyflakes
    "I",      # isort
    "B",      # flake8-bugbear
    "C4",     # flake8-comprehensions
    "UP",     # pyupgrade
    "ARG",    # flake8-unused-arguments
    "SIM",    # flake8-simplify
    "TCH",    # flake8-type-checking
    "RUF",    # Ruff-specific rules
    "TRY",    # tryceratops
    "PTH",    # flake8-use-pathlib
    "S",      # flake8-bandit (security)
    "DTZ",    # flake8-datetimez
    "G",      # flake8-logging-format
]
ignore = [
    "E501",    # line too long (handled by formatter)
    "B008",    # do not perform function calls in argument defaults
    "S101",    # use of assert detected (needed for tests)
    "TRY003",  # long messages outside exception class
    "G004",    # f-string in logging
    "DTZ005",  # datetime without timezone (would need major refactor)
    "COM812",  # May cause conflicts with formatter
    "ISC001",  # May cause conflicts with formatter
    "ARG001",  # Unused function argument (common in overrides)
    "PLR0911", # Too many return statements
    "RUF100",  # Unused noqa directives (cleanup later)
]

[tool.ruff.lint.per-file-ignores]
"tests/*" = ["S101", "PLR2004", "ARG001"]  # Allow assert and magic values in tests
"tools/*" = ["ALL"]  # Ignore all ruff rules for tools directory

[tool.ruff.format]
quote-style = "double"
indent-style = "space"
skip-magic-trailing-comma = false
line-ending = "lf"

[tool.mypy]
python_version = "3.12"
warn_return_any = true
warn_unused_configs = true
disallow_untyped_defs = false
disallow_incomplete_defs = false
check_untyped_defs = true
disallow_untyped_decorators = false
no_implicit_optional = true
warn_redundant_casts = true
warn_unused_ignores = true
warn_no_return = true
warn_unreachable = true
strict_equality = true
exclude = ["tools/"]

[tool.bandit]
exclude_dirs = ["tests", "venv", ".venv"]
skips = ["B101"]  # Skip assert_used test

[tool.pytest.ini_options]
testpaths = ["tests"]
python_files = ["test_*.py", "*_test.py"]
python_classes = ["Test*"]
python_functions = ["test_*"]
pythonpath = ["src"]
addopts = [
    "--verbose",
    "--cov=src/spreadsheet_analyzer",
    "--cov-report=term-missing",
    "--cov-report=html",
    "--cov-fail-under=25",  # Temporary lower threshold while building test suite
]



[tool.commitizen]
name = "cz_conventional_commits"
version_provider = "pep621"
version_files = [
    "pyproject.toml:version",
]
update_changelog_on_bump = false
style = [
    ["qmark", "fg:#ff9d00 bold"],
    ["question", "bold"],
    ["answer", "fg:#ff9d00 bold"],
    ["pointer", "fg:#ff9d00 bold"],
    ["highlighted", "fg:#ff9d00 bold"],
    ["selected", "fg:#cc5454"],
    ["separator", "fg:#cc5454"],
    ["instruction", ""],
    ["text", ""],
    ["disabled", "fg:#858585 italic"],
]

[dependency-groups]
dev = [
    "pytest-timeout>=2.4.0",
]
