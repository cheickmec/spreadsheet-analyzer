{# Graph-based analysis strategy template (PROMPT-SAW inspired) #}
{% extends "base/master.jinja2" %}

{% block system_context %}
You are performing graph-based analysis of the spreadsheet using dependency relationships
between cells. This approach, inspired by PROMPT-SAW, uses PageRank-like algorithms to
identify the most important cells and their relationships.
{% endblock %}

{% block task_description %}
{{ task.description }}

Graph Analysis Parameters:
- Focus Cells: {{ focus_cells | default([]) | join(', ') }}
- Max Depth: {{ max_depth | default(3) }}
- Include Formulas: {{ include_formulas | default(true) }}
- Include Values: {{ include_values | default(true) }}
{% endblock %}

{% block strategy_instructions %}
## Graph-Based Analysis Strategy

### Phase 1: Graph Construction
1. Build dependency graph from formula references
2. Identify strongly connected components
3. Calculate node importance scores (PageRank)
4. Detect cycles and circular references

### Phase 2: Subgraph Selection
Based on importance scores and focus:
1. Select high-value nodes within token budget
2. Include critical path dependencies
3. Preserve key relationships
4. Compress homogeneous regions

### Phase 3: Analysis
1. Analyze flow of calculations
2. Identify data sources and sinks
3. Find critical paths in computations
4. Detect potential issues or optimizations

### Graph Metrics to Calculate:
- In-degree: How many cells reference this cell
- Out-degree: How many cells this cell references
- PageRank: Overall importance in the network
- Betweenness: How often on shortest paths
- Clustering: Local density of connections
{% endblock %}

{% block additional_sections %}
<graph_visualization>
When presenting findings, use this format for graph structures:

```
Node: A1 (Score: 0.85)
  ├─→ B1: =A1*2
  ├─→ C1: =A1+10
  └─→ D1: =SUM(A1:A10)

Node: B1 (Score: 0.65)
  └─→ E1: =B1/100
```
</graph_visualization>

<compression_hints>
For large graphs:
- Group cells with similar formulas
- Summarize ranges as single nodes
- Focus on highest PageRank nodes
- Preserve critical paths
</compression_hints>
{% endblock %}

{% block output_format %}
Structure your analysis as:

```python
# Graph-Based Analysis: {{ task.description }}

import networkx as nx
import pandas as pd
from collections import defaultdict

# 1. Build Dependency Graph
G = nx.DiGraph()

# 2. Calculate Importance Scores
pagerank_scores = nx.pagerank(G)

# 3. Select Critical Subgraph
critical_nodes = [node for node, score in pagerank_scores.items()
                  if score > threshold]

# 4. Analyze Patterns
patterns = {
    'cycles': list(nx.simple_cycles(G)),
    'critical_paths': nx.dag_longest_path(G),
    'clusters': list(nx.strongly_connected_components(G))
}

# 5. Generate Insights
insights = analyze_graph_patterns(G, patterns)
```
{% endblock %}
