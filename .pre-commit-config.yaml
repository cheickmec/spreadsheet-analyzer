# See https://pre-commit.com for more information
# See https://pre-commit.com/hooks.html for more hooks
#
# Install: uv add --dev pre-commit && uv run pre-commit install
# Run manually: uv run pre-commit run --all-files
# Update hooks: uv run pre-commit autoupdate

# Global exclusions
exclude: |
  (?x)^(
    \.mypy_cache/|
    \.pytest_cache/|
    \.venv/|
    \.env/|
    venv/|
    env/|
    build/|
    dist/|
    .*\.egg-info/|
    __pycache__/|
    \.git/|
    \.idea/|
    \.vscode/|
    \.DS_Store
  )

repos:
  # Standard housekeeping hooks
  - repo: https://github.com/pre-commit/pre-commit-hooks
    rev: v5.0.0
    hooks:
      - id: trailing-whitespace
        exclude: ^.*\.md$  # Exclude markdown files - mdformat handles them
      - id: end-of-file-fixer
      - id: check-yaml
        args: ['--unsafe']  # Allow custom tags
      - id: check-json
        exclude: 'tests/fixtures/captured_outputs/data-analysis/advanced_excel_formulas\.json'  # Exclude LFS-tracked file
      - id: check-toml
      - id: check-xml
      - id: check-added-large-files
        args: ['--maxkb=1000']  # Warn for files over 1MB
      - id: check-case-conflict
      - id: check-merge-conflict
      - id: check-symlinks
      - id: check-executables-have-shebangs
      - id: check-shebang-scripts-are-executable
      - id: debug-statements
      - id: detect-private-key
      - id: mixed-line-ending
        args: ['--fix=lf']
      - id: name-tests-test
        args: ['--pytest-test-first']
      - id: requirements-txt-fixer
      - id: fix-byte-order-marker
      - id: check-docstring-first
      - id: check-ast

  # Python code formatting and linting with Ruff
  - repo: https://github.com/astral-sh/ruff-pre-commit
    rev: v0.12.3
    hooks:
      # Run the linter
      - id: ruff-check
        args: ['--fix']
      # Run the formatter
      - id: ruff-format

  # Type checking with mypy
  - repo: https://github.com/pre-commit/mirrors-mypy
    rev: v1.16.1
    hooks:
      - id: mypy
        additional_dependencies: ['types-openpyxl>=3.1.0.20240311', 'types-defusedxml>=0.7.0.20240218']
        args: ['--ignore-missing-imports', '--no-strict-optional']

  # Security scanning with bandit
  - repo: https://github.com/PyCQA/bandit
    rev: 1.8.6
    hooks:
      - id: bandit
        args: ['-ll']  # Low severity
        exclude: ^(tests/|\.venv/|venv/|env/|\.env/)

  # YAML linting
  - repo: https://github.com/adrienverge/yamllint
    rev: v1.37.1
    hooks:
      - id: yamllint
        args: ['-d', 'relaxed']

  # Markdown formatting (optional but recommended)
  - repo: https://github.com/executablebooks/mdformat
    rev: 0.7.22
    hooks:
      - id: mdformat
        additional_dependencies:
          - mdformat-gfm
          - mdformat-tables
          - mdformat-footnote

  # Jupyter notebook cleaning (if you use notebooks)
  - repo: https://github.com/srstevenson/nb-clean
    rev: 4.0.1
    hooks:
      - id: nb-clean
        args: ['--remove-empty-cells']

  # Commit message linting with commitizen
  - repo: https://github.com/commitizen-tools/commitizen
    rev: v4.8.3
    hooks:
      - id: commitizen
        stages: [commit-msg]

  # Local hooks for project-specific checks
  - repo: local
    hooks:
      # Ensure pyproject.toml is valid
      - id: validate-pyproject
        name: validate pyproject.toml
        entry: python -c "import tomli; tomli.load(open('pyproject.toml', 'rb'))"
        language: python
        files: ^pyproject\.toml$
        pass_filenames: false
        additional_dependencies: ['tomli']

# Configuration for pre-commit.ci (optional)
ci:
  autofix_commit_msg: ðŸŽ¨ [pre-commit.ci] Auto format from pre-commit.com hooks
  autoupdate_commit_msg: â¬† [pre-commit.ci] pre-commit autoupdate
  autoupdate_schedule: monthly
