"""OpenAI models for the model registry.

This module defines all available OpenAI models including o-series reasoning
models and GPT flagship models, with their capabilities and recommendations.

CLAUDE-KNOWLEDGE: OpenAI o-series models are optimized for reasoning tasks
while GPT models provide balanced capabilities. Model selection should
consider the reasoning requirements of the task.
"""

from .base import AgentType, ModelCapabilities, ModelInfo, ModelProvider, TaskComplexity

# OpenAI Models
OPENAI_MODELS = {
    # o-series Reasoning models
    "o4-mini": ModelInfo(
        model_id="o4-mini",
        display_name="o4-mini",
        provider=ModelProvider.OPENAI,
        capabilities=ModelCapabilities(
            reasoning_strength=8,
            speed=8,
            cost_efficiency=8,
            context_length=128000,
            supports_tools=True,
            supports_vision=False,
            supports_audio=False,
            multimodal=False,
        ),
        recommended_for=[AgentType.FORMULA_ANALYZER, AgentType.DATA_ANALYST, AgentType.PATTERN_FINDER],
        best_complexity=[TaskComplexity.MODERATE, TaskComplexity.COMPLEX],
        description="Faster, more affordable reasoning model with strong analytical capabilities",
    ),
    "o3": ModelInfo(
        model_id="o3",
        display_name="o3",
        provider=ModelProvider.OPENAI,
        capabilities=ModelCapabilities(
            reasoning_strength=10,
            speed=5,
            cost_efficiency=4,
            context_length=128000,
            supports_tools=True,
            supports_vision=False,
            supports_audio=False,
            multimodal=False,
        ),
        recommended_for=[AgentType.FORMULA_ANALYZER, AgentType.DATA_ANALYST, AgentType.PATTERN_FINDER],
        best_complexity=[TaskComplexity.COMPLEX, TaskComplexity.RESEARCH],
        description="Most powerful reasoning model for complex multi-step analysis",
    ),
    "o3-pro": ModelInfo(
        model_id="o3-pro",
        display_name="o3-pro",
        provider=ModelProvider.OPENAI,
        capabilities=ModelCapabilities(
            reasoning_strength=10,
            speed=3,
            cost_efficiency=2,
            context_length=128000,
            supports_tools=True,
            supports_vision=False,
            supports_audio=False,
            multimodal=False,
        ),
        recommended_for=[AgentType.FORMULA_ANALYZER, AgentType.DATA_ANALYST],
        best_complexity=[TaskComplexity.COMPLEX, TaskComplexity.RESEARCH],
        description="Enhanced o3 with more compute for the most demanding analytical tasks",
        notes="Premium model - highest cost but maximum reasoning capability",
    ),
    "o3-mini": ModelInfo(
        model_id="o3-mini",
        display_name="o3-mini",
        provider=ModelProvider.OPENAI,
        capabilities=ModelCapabilities(
            reasoning_strength=7,
            speed=8,
            cost_efficiency=8,
            context_length=128000,
            supports_tools=True,
            supports_vision=False,
            supports_audio=False,
            multimodal=False,
        ),
        recommended_for=[AgentType.FORMULA_ANALYZER, AgentType.PATTERN_FINDER, AgentType.TABLE_DETECTOR],
        best_complexity=[TaskComplexity.MODERATE],
        description="Smaller, faster alternative to o3 for moderate complexity tasks",
    ),
    # GPT flagship models
    "gpt-4.1": ModelInfo(
        model_id="gpt-4.1",
        display_name="GPT-4.1",
        provider=ModelProvider.OPENAI,
        capabilities=ModelCapabilities(
            reasoning_strength=9,
            speed=6,
            cost_efficiency=5,
            context_length=128000,
            supports_tools=True,
            supports_vision=True,
            supports_audio=False,
            multimodal=True,
        ),
        recommended_for=[AgentType.DATA_ANALYST, AgentType.COORDINATOR, AgentType.GENERAL_PURPOSE],
        best_complexity=[TaskComplexity.COMPLEX, TaskComplexity.MODERATE],
        description="Flagship GPT model for complex analytical tasks",
    ),
    "gpt-4o": ModelInfo(
        model_id="gpt-4o",
        display_name="GPT-4o",
        provider=ModelProvider.OPENAI,
        capabilities=ModelCapabilities(
            reasoning_strength=8,
            speed=8,
            cost_efficiency=6,
            context_length=128000,
            supports_tools=True,
            supports_vision=True,
            supports_audio=True,
            multimodal=True,
        ),
        recommended_for=[AgentType.DATA_ANALYST, AgentType.STRUCTURE_ANALYZER, AgentType.GENERAL_PURPOSE],
        best_complexity=[TaskComplexity.MODERATE, TaskComplexity.COMPLEX],
        description="Fast, intelligent, flexible GPT model with multimodal capabilities",
    ),
    "chatgpt-4o-latest": ModelInfo(
        model_id="chatgpt-4o-latest",
        display_name="ChatGPT-4o",
        provider=ModelProvider.OPENAI,
        capabilities=ModelCapabilities(
            reasoning_strength=8,
            speed=8,
            cost_efficiency=6,
            context_length=128000,
            supports_tools=True,
            supports_vision=True,
            supports_audio=False,
            multimodal=True,
        ),
        recommended_for=[AgentType.DATA_ANALYST, AgentType.GENERAL_PURPOSE],
        best_complexity=[TaskComplexity.MODERATE],
        description="GPT-4o model variant used in ChatGPT",
    ),
    # Cost-optimized models
    "gpt-4.1-mini": ModelInfo(
        model_id="gpt-4.1-mini",
        display_name="GPT-4.1 mini",
        provider=ModelProvider.OPENAI,
        capabilities=ModelCapabilities(
            reasoning_strength=7,
            speed=9,
            cost_efficiency=8,
            context_length=128000,
            supports_tools=True,
            supports_vision=True,
            supports_audio=False,
            multimodal=True,
        ),
        recommended_for=[AgentType.TABLE_DETECTOR, AgentType.STRUCTURE_ANALYZER, AgentType.PATTERN_FINDER],
        best_complexity=[TaskComplexity.MODERATE, TaskComplexity.SIMPLE],
        description="Balanced model optimizing intelligence, speed, and cost",
    ),
    "gpt-4.1-nano": ModelInfo(
        model_id="gpt-4.1-nano",
        display_name="GPT-4.1 nano",
        provider=ModelProvider.OPENAI,
        capabilities=ModelCapabilities(
            reasoning_strength=6,
            speed=10,
            cost_efficiency=10,
            context_length=128000,
            supports_tools=True,
            supports_vision=True,
            supports_audio=False,
            multimodal=True,
        ),
        recommended_for=[AgentType.TABLE_DETECTOR, AgentType.STRUCTURE_ANALYZER],
        best_complexity=[TaskComplexity.SIMPLE],
        description="Fastest, most cost-effective GPT-4.1 model for simple tasks",
    ),
    "gpt-4o-mini": ModelInfo(
        model_id="gpt-4o-mini",
        display_name="GPT-4o mini",
        provider=ModelProvider.OPENAI,
        capabilities=ModelCapabilities(
            reasoning_strength=6,
            speed=9,
            cost_efficiency=9,
            context_length=128000,
            supports_tools=True,
            supports_vision=True,
            supports_audio=False,
            multimodal=True,
        ),
        recommended_for=[AgentType.TABLE_DETECTOR, AgentType.STRUCTURE_ANALYZER, AgentType.PATTERN_FINDER],
        best_complexity=[TaskComplexity.SIMPLE, TaskComplexity.MODERATE],
        description="Fast, affordable small model for focused analytical tasks",
    ),
    # Legacy models (deprecated)
    "o1": ModelInfo(
        model_id="o1",
        display_name="o1",
        provider=ModelProvider.OPENAI,
        capabilities=ModelCapabilities(
            reasoning_strength=9,
            speed=4,
            cost_efficiency=4,
            context_length=128000,
            supports_tools=True,
            supports_vision=False,
            supports_audio=False,
            multimodal=False,
        ),
        recommended_for=[AgentType.FORMULA_ANALYZER],
        best_complexity=[TaskComplexity.COMPLEX],
        description="Previous full o-series reasoning model",
        notes="Consider upgrading to o3 for better performance",
    ),
    "o1-mini": ModelInfo(
        model_id="o1-mini",
        display_name="o1-mini",
        provider=ModelProvider.OPENAI,
        capabilities=ModelCapabilities(
            reasoning_strength=7,
            speed=7,
            cost_efficiency=7,
            context_length=128000,
            supports_tools=True,
            supports_vision=False,
            supports_audio=False,
            multimodal=False,
        ),
        recommended_for=[AgentType.PATTERN_FINDER],
        best_complexity=[TaskComplexity.MODERATE],
        description="Small alternative to o1",
        deprecated=True,
        notes="DEPRECATED - Use o3-mini instead",
    ),
    "o1-pro": ModelInfo(
        model_id="o1-pro",
        display_name="o1-pro",
        provider=ModelProvider.OPENAI,
        capabilities=ModelCapabilities(
            reasoning_strength=9,
            speed=3,
            cost_efficiency=3,
            context_length=128000,
            supports_tools=True,
            supports_vision=False,
            supports_audio=False,
            multimodal=False,
        ),
        recommended_for=[AgentType.FORMULA_ANALYZER],
        best_complexity=[TaskComplexity.COMPLEX],
        description="Enhanced o1 with more compute",
        notes="Consider upgrading to o3-pro for better performance",
    ),
}
